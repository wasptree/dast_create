trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
      
#Submit DAST Scan to Veracode
- task: CmdLine@2
  displayName: VC - Install Veracode Auth
  inputs:
    script: |
      pip install veracode-api-signing
- task: CmdLine@2
  displayName: VC - Apply Creds
  inputs:
    script: |
      cat > credentials.txt << 'EOF'
      [default]
      veracode_api_key_id = $(VERACODE_API_KEY_ID)
      veracode_api_key_secret = $(VERACODE_API_KEY_SECRET)
      EOF
      mkdir c:\Users\VssAdministrator\.veracode
      cp credentials.txt c:\Users\VssAdministrator\.veracode\credentials
- task: CmdLine@2
  displayName: VC - Create DA json
  inputs:
    script: |
      cat > da_scan.json << 'EOF'
      {
          "name":"DAST Demo App",
          "scans":[
            {
                "scan_config_request":{
                  "target_url":{
                      "url":"http://wasptree.com"
                  }
                }
            }
          ],
          "schedule":{
            "duration":{
                "length":1,
                "unit":"DAY"
            },
            "scheduled":true,
            "now":true
          }
      }
      EOF
- task: PythonScript@0
  displayName: VC - kick off DAST scan
  inputs:
    scriptSource: 'inline'
    script: |
      import sys
      import json
      import requests
      from veracode_api_signing.plugin_requests import RequestsAuthPluginVeracodeHMAC
      
      
      api_base = "https://api.veracode.com/was/configservice/v1"
      headers = {"User-Agent": "Start DA Scan Example", 'Content-type': 'application/json'}
      
      
      if __name__ == "__main__":
      
          try:
              contents = open('da_scan.json', 'rb').read()
              print(contents)
              response = requests.post(api_base + "/analyses", auth=RequestsAuthPluginVeracodeHMAC(), data=contents, headers=headers)
          except requests.RequestException as e:
              print("Failed...")
              print(e)
              sys.exit(1)
      
          if response.ok:
              print(response.status_code)
              print(response.content)
      
          else:
              print(response.status_code)
              print(response.content)